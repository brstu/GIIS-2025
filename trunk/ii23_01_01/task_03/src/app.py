from flask import Flask, render_template, request, redirect, url_for, flash
from flask_wtf.csrf import CSRFProtect
from werkzeug.security import generate_password_hash
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)
secret = os.environ.get('SECRET_KEY')
if not secret:
    raise RuntimeError("SECRET_KEY must be set in environment for production.")
app.config['SECRET_KEY'] = secret
app.config['WTF_CSRF_TIME_LIMIT'] = 3600
app.config['WTF_CSRF_SSL_STRICT'] = True

csrf = CSRFProtect(app)

# üîπ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–µ–∑–¥–∞—Ö
trains = [
    {
        'id': 1,
        'number': '101–ê',
        'from_city': '–ú–æ—Å–∫–≤–∞',
        'to_city': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        'departure_time': '08:00',
        'arrival_time': '12:00',
        'available_seats': ['1A', '1B', '2A', '2B']
    },
    {
        'id': 2,
        'number': '202–ë',
        'from_city': '–ö–∞–∑–∞–Ω—å',
        'to_city': '–ú–æ—Å–∫–≤–∞',
        'departure_time': '14:30',
        'arrival_time': '22:00',
        'available_seats': ['3A', '3B', '4A']
    },
]

# üîπ –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–∏–ª–µ—Ç–æ–≤
# üîπ –ù–∞—á–∞–ª—å–Ω—ã–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
tickets = [
    {
        'id': 1,
        'train_id': 1,
        'train_number': '101–ê',
        'from_city': '–ú–æ—Å–∫–≤–∞',
        'to_city': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        'seat': '1A',
        'passenger_name': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
        'passenger_email': 'ivan@example.com'
    },
    {
        'id': 2,
        'train_id': 2,
        'train_number': '202–ë',
        'from_city': '–ö–∞–∑–∞–Ω—å',
        'to_city': '–ú–æ—Å–∫–≤–∞',
        'seat': '3B',
        'passenger_name': '–ú–∞—Ä–∏—è –°–º–∏—Ä–Ω–æ–≤–∞',
        'passenger_email': 'maria@example.com'
    }
]

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç –∏–∑ –ø–æ–µ–∑–¥–æ–≤
for ticket in tickets:
    train = next((t for t in trains if t['id'] == ticket['train_id']), None)
    if train and ticket['seat'] in train['available_seats']:
        train['available_seats'].remove(ticket['seat'])


# –ì–ª–∞–≤–Ω–∞—è ‚Äî –ø–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
@app.route('/')
def home():
    return render_template('home.html')

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
@app.route('/search')
def search_results():
    from_city = request.args.get('from_city', '').strip().lower()
    to_city = request.args.get('to_city', '').strip().lower()
    date = request.args.get('date')

    filtered_trains = [
        t for t in trains
        if from_city in t['from_city'].lower() and to_city in t['to_city'].lower()
    ]
    return render_template('search_results.html', trains=filtered_trains)

# –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞
# –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (GET)
@app.route('/book/<int:train_id>', methods=['GET'])
def show_booking_form(train_id):
    train = next((t for t in trains if t['id'] == train_id), None)
    if not train:
        flash('–ü–æ–µ–∑–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('home'))
    return render_template('book_ticket.html', train=train)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (POST)
@app.route('/book/<int:train_id>', methods=['POST'])
def process_booking(train_id):
    train = next((t for t in trains if t['id'] == train_id), None)
    if not train:
        flash('–ü–æ–µ–∑–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('home'))

    passenger_name = request.form.get('passenger_name')
    passenger_email = request.form.get('passenger_email')
    seat = request.form.get('seat')

    if not passenger_name or not passenger_email or not seat:
        flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error')
        return redirect(url_for('show_booking_form', train_id=train_id))

    if seat not in train['available_seats']:
        flash('–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', 'error')
        return redirect(url_for('show_booking_form', train_id=train_id))

    # –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    train['available_seats'].remove(seat)

    ticket = {
        'id': len(tickets) + 1,
        'train_id': train['id'],
        'train_number': train['number'],
        'from_city': train['from_city'],
        'to_city': train['to_city'],
        'seat': seat,
        'passenger_name': passenger_name,
        'passenger_email': passenger_email
    }
    tickets.append(ticket)
    return redirect(url_for('confirmation', ticket_id=ticket['id']))


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
@app.route('/confirmation/<int:ticket_id>')
def confirmation(ticket_id):
    ticket = next((t for t in tickets if t['id'] == ticket_id), None)
    if not ticket:
        flash('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('home'))
    return render_template('confirmation.html', ticket=ticket)

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@app.route('/profile')
def profile():
    return render_template('profile.html', tickets=tickets)

# –û—Ç–º–µ–Ω–∞ –±–∏–ª–µ—Ç–∞
@app.route('/cancel/<int:ticket_id>')
def cancel_ticket(ticket_id):
    global tickets
    ticket = next((t for t in tickets if t['id'] == ticket_id), None)
    if not ticket:
        flash('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('profile'))

    # –í–µ—Ä–Ω—É—Ç—å –º–µ—Å—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ
    train = next((t for t in trains if t['id'] == ticket['train_id']), None)
    if train:
        train['available_seats'].append(ticket['seat'])

    tickets = [t for t in tickets if t['id'] != ticket_id]
    flash('–ë–∏–ª–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω', 'success')
    return redirect(url_for('profile'))

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    app.run(debug=os.environ.get('FLASK_DEBUG', 'False') == 'True')
