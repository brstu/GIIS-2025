import streamlit as st
import pandas as pd
import plotly.express as px
from streamlit_plotly_events import plotly_events
import base64
from io import BytesIO

st.set_page_config(page_title="üìä DataViz Pro", page_icon="üìä", layout="wide")

st.markdown(
    """
    <style>
    .stButton button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
    }
    .stExpander {
        background-color: #f0f2f6;
        border-radius: 10px;
        padding: 10px;
    }
    .stMarkdown h1 {
        color: #2e86c1;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

st.title("üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö")

uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö (CSV –∏–ª–∏ Excel)", type=["csv", "xlsx"])

st.info("‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã CSV –∏ Excel. –î–ª—è CSV –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.")

if uploaded_file is not None:
    if uploaded_file.name.endswith('.csv'):
        delimiter = st.text_input("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è CSV-—Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—è—Ç–∞—è)", ",")
    else:
        delimiter = ","

    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file, delimiter=delimiter)
    else:
        df = pd.read_excel(uploaded_file, engine='openpyxl')

    with st.expander("üìÑ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ", expanded=True):
        st.dataframe(df)

        csv = df.to_csv(index=False)
        b64 = base64.b64encode(csv.encode()).decode()
        st.markdown(
            f'<a href="data:file/csv;base64,{b64}" download="data.csv">‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV</a>',
            unsafe_allow_html=True,
        )

    with st.expander("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
        st.write("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        st.write(df.describe())

        st.write("### üìà –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö")
        st.write(df.dtypes)

    with st.expander("üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            if st.checkbox("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"):
                df = df.dropna()
                st.success("‚úÖ –°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —É–¥–∞–ª–µ–Ω—ã.")
        with col2:
            if st.checkbox("üìè –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                df = (df - df.mean()) / df.std()
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã.")

    with st.expander("üî¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
        group_by = st.multiselect("üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏", df.columns.tolist())
        if group_by:
            agg_func = st.selectbox("üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", ["sum", "mean", "count", "min", "max"])
            df_grouped = df.groupby(group_by).agg(agg_func).reset_index()
            st.write("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
            st.dataframe(df_grouped)
            df = df_grouped

    with st.expander("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", expanded=False):
        filter_column = st.selectbox("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", df.columns.tolist())
        if df[filter_column].dtype in ["int64", "float64"]:
            min_val, max_val = float(df[filter_column].min()), float(df[filter_column].max())
            filter_range = st.slider("üéöÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω", min_val, max_val, (min_val, max_val))
            df = df[(df[filter_column] >= filter_range[0]) & (df[filter_column] <= filter_range[1])]
        else:
            filter_value = st.selectbox("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", df[filter_column].unique())
            df = df[df[filter_column] == filter_value]

    with st.expander("üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", expanded=False):
        chart_type = st.selectbox(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
            ["–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞"]
        )

        columns = df.columns.tolist()
        x_axis = st.selectbox("üìè –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ—Å–∏ X", columns)
        y_axis = st.selectbox("üìè –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ—Å–∏ Y", columns) if chart_type != "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞" else None

        if chart_type == "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è":
            color_column = st.selectbox("üé® –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ü–≤–µ—Ç–∞", columns)
            size_column = st.selectbox("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ—á–µ–∫", columns)
        else:
            color_column = None
            size_column = None

        if chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
            fig = px.line(df, x=x_axis, y=y_axis, title="üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
        elif chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            fig = px.histogram(df, x=x_axis, title="üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞")
        elif chart_type == "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è":
            fig = px.scatter(df, x=x_axis, y=y_axis, color=color_column, size=size_column, title="üîç –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è")
        elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
            fig = px.pie(df, names=x_axis, title="üçï –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞")
        elif chart_type == "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞":
            fig = px.imshow(df.corr(), title="üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")

        st.plotly_chart(fig, use_container_width=True)

        selected_points = plotly_events(fig, select_event=True)
        st.write("### üìå –í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        if selected_points:
            selected_indices = [p["pointIndex"] for p in selected_points]
            selected_data = df.iloc[selected_indices]
            st.dataframe(selected_data)
        else:
            st.info("‚ÑπÔ∏è –í—ã–¥–µ–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è (–ª–∞—Å—Å–æ –∏–ª–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫).")

    st.markdown("---")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    with st.expander("üìö –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö", expanded=True):
        st.markdown(
            """
            <style>
            .transparent-text {
                color: rgba(0, 0, 0, 0.6);  /* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ç–µ–∫—Å—Ç */
                font-size: 0.9em;
            }
            </style>
            <div class="transparent-text">
            üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–∏.<br>
            üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.<br>
            üîç –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–≤—É–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏.<br>
            üçï –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –æ–±—â–µ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö.<br>
            üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏.<br>
            üìå –í—ã–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è (–ª–∞—Å—Å–æ –∏–ª–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫) –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
            </div>
            """,
            unsafe_allow_html=True
        )

else:
    st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")