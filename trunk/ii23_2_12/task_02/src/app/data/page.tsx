"use client";

import React, { useState, useEffect, useRef } from "react";
import { Upload } from "lucide-react";
import {
    LineChart,
    Line,
    XAxis,
    YAxis,
    CartesianGrid,
    Tooltip,
    Legend,
    ResponsiveContainer,
    BarChart,
    Bar,
    ScatterChart,
    Scatter,
} from "recharts";
import { Card, CardContent } from "@/components/ui/Card";
import { Select, SelectContent, SelectItem, SelectTrigger } from "@/components/ui/Select";
import { Switch } from "@/components/ui/switch";
import { Table } from "antd";
import ExportChart from "@/components/ExportChart";
import { aggregateData, normalizeData } from "@/lib";
import { processFileData } from "@/lib/processFileData";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/Button";

const DataVisualizer: React.FC = () => {
    const exportRef = useRef<HTMLDivElement>(null);
    const [fileName, setFileName] = useState<string | null>(null);
    const [data, setData] = useState<any[]>([]);
    const [aggregatedData, setAggregatedData] = useState<any[]>([]);
    const [chartType, setChartType] = useState("–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫");
    const [selectedDataKey, setSelectedDataKey] = useState<string>("value");
    const [aggregationMethod, setAggregationMethod] = useState("–°—É–º–º–∞");
    const [isNormalizationEnabled, setIsNormalizationEnabled] = useState(true);

    useEffect(() => {
        if (data.length) {
            let aggregated = aggregateData(data, selectedDataKey, aggregationMethod);
            if (isNormalizationEnabled) {
                aggregated = normalizeData(aggregated, selectedDataKey);
            }
            setAggregatedData(aggregated);
        }
    }, [selectedDataKey, aggregationMethod, data, isNormalizationEnabled]);

    const columns = data.length
        ? Object.keys(data[0]).map((key) => ({
              title: key,
              dataIndex: key,
              key: key,
          }))
        : [];

    return (
        <div className="p-6">
            {data.length > 0 && (
            <div>
                <div className="flex justify-between">
                    <h1 className="text-2xl font-bold">–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</h1>
                    <Dialog>
                            <DialogTrigger asChild>
                                <Button variant="outline">–ü–æ–¥—Å–∫–∞–∑–∫–∏</Button>
                            </DialogTrigger>
                            <DialogContent className="sm:max-w-[425px]">
                                <DialogHeader>
                                    <DialogTitle>–ü–æ–¥—Å–∫–∞–∑–∫–∏</DialogTitle>
                                </DialogHeader>
                                <div className="text-[#444] text-md leading-[130%] px-4">
                                    <ol className="flex flex-col gap-3 list-decimal">
                                        <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel</li>
                                        <li>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–≥—Ä–∞—Ñ–∏–∫, ‚Ññ —Å—Ç–æ–ª–±—Ü–∞, –∞–≥—Ä–∏–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è)</li>
                                        <li>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</li>
                                    </ol>
                                </div>
                            </DialogContent>
                    </Dialog>
                </div>
                <div className="mt-2 text-sm text-gray-600">
                    <p>üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: <strong>{fileName}</strong></p>
                    <p>üìä –î–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ: <strong>{data.length}</strong></p>
                    <p>üßÆ –ü–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: <strong>{aggregatedData.length}</strong></p>
                    <p>üìè –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: <strong>{isNormalizationEnabled ? aggregatedData.length : '–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞'}</strong></p>
                </div>
                <div className="flex justify-between items-center mt-4  ">
                        <CardContent className="flex flex-col items-center w-fit -px-3">
                            <input
                                type="file"
                                accept=".csv,.xlsx"
                                onChange={(e) =>
                                    e.target.files?.[0] && processFileData(setFileName, e.target.files[0], setData)
                                }
                                className="hidden"
                                id="file-upload"
                            />
                            <label
                                htmlFor="file-upload"
                                className="cursor-pointer flex items-center space-x-2 border p-2 rounded-lg shadow hover:bg-accent">
                                <Upload size={20} />
                                <span>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</span>
                            </label>
                        </CardContent>
                        <ExportChart exportRef={exportRef} />
                </div>
            </div>
            )}
            {data.length > 0 ? (
                <div className="flex justify-between gap-10 mt-4">
                    <div className="w-[50%]">
                        <div className="sticky top-5 my-4">
                            <div className="flex items-center space-x-4 mb-10">
                                <h2 className="text-md font-semibold">—Ñ–∏–ª—å—Ç—Ä—ã:</h2>
                                <Select value={chartType} onValueChange={setChartType}>
                                    <SelectTrigger>{chartType}</SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫">
                                            –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                                        </SelectItem>
                                        <SelectItem value="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞">–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞</SelectItem>
                                        <SelectItem value="–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è">
                                            –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è
                                        </SelectItem>
                                    </SelectContent>
                                </Select>

                                <Select value={selectedDataKey} onValueChange={setSelectedDataKey}>
                                    <SelectTrigger>{selectedDataKey}</SelectTrigger>
                                    <SelectContent>
                                        {Object.keys(data[0] || {}).map((key) => (
                                            <SelectItem key={key} value={key}>
                                                {key}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>

                                <Select
                                    value={aggregationMethod}
                                    onValueChange={setAggregationMethod}>
                                    <SelectTrigger>{aggregationMethod}</SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="–°—É–º–º–∞">–°—É–º–º–∞</SelectItem>
                                        <SelectItem value="–°—Ä–µ–¥–Ω–µ–µ">–°—Ä–µ–¥–Ω–µ–µ</SelectItem>
                                        <SelectItem value="–ú–∞–∫—Å–∏–º—É–º">–ú–∞–∫—Å–∏–º—É–º</SelectItem>
                                        <SelectItem value="–ú–∏–Ω–∏–º—É–º">–ú–∏–Ω–∏–º—É–º</SelectItem>
                                    </SelectContent>
                                </Select>

                                {/* –¢–æ–≥–ª –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ */}
                                <div className="flex items-center space-x-2">
                                    <span>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è</span>
                                    <Switch
                                        checked={isNormalizationEnabled}
                                        onCheckedChange={setIsNormalizationEnabled}
                                    />
                                </div>
                            </div>

                            <div ref={exportRef}>
                                <ResponsiveContainer width="100%" height={400}>
                                    {chartType === "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫" && (
                                        <LineChart data={aggregatedData}>
                                            <CartesianGrid strokeDasharray="3 3" />
                                            <XAxis dataKey="name" />
                                            <YAxis />
                                            <Tooltip />
                                            <Legend />
                                            <Line
                                                type="monotone"
                                                dataKey={selectedDataKey}
                                                stroke="#8884d8"
                                            />
                                        </LineChart>
                                    )}

                                    {chartType === "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞" && (
                                        <BarChart data={aggregatedData}>
                                            <CartesianGrid strokeDasharray="3 3" />
                                            <XAxis dataKey="name" />
                                            <YAxis />
                                            <Tooltip />
                                            <Legend />
                                            <Bar dataKey={selectedDataKey} fill="#82ca9d" />
                                        </BarChart>
                                    )}

                                    {chartType === "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è" && (
                                        <ScatterChart>
                                            <CartesianGrid strokeDasharray="3 3" />
                                            <XAxis dataKey="x" name="–ú–µ—Å—è—Ü" type="category" />
                                            <YAxis dataKey="y" name="–ó–Ω–∞—á–µ–Ω–∏–µ" />
                                            <Tooltip cursor={{ strokeDasharray: "3 3" }} />
                                            <Legend />
                                            <Scatter
                                                name="–î–∞–Ω–Ω—ã–µ"
                                                data={aggregatedData.map((d) => ({
                                                    x: d.name,
                                                    y: d[selectedDataKey],
                                                }))}
                                                fill="#8884d8"
                                            />
                                        </ScatterChart>
                                    )}
                                </ResponsiveContainer>
                            </div>
                        </div>
                    </div>

                    <Card className="p-5 w-[50%]">
                        <h2>üìã –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
                        <Table
                            dataSource={data}
                            columns={columns}
                            rowKey="name"
                            pagination={{ pageSize: 30 }}
                        />
                    </Card>
                </div>
            ) : (
                <Card className="flex items-center justify-center  m-5 p-20">
                    <CardContent className="flex flex-col items-center w-fit">
                        <input
                            type="file"
                            accept=".csv,.xlsx"
                            onChange={(e) =>
                                e.target.files?.[0] && processFileData(setFileName, e.target.files[0], setData)
                            }
                            className="hidden"
                            id="file-upload"
                        />
                        <label
                            htmlFor="file-upload"
                            className="cursor-pointer flex items-center space-x-2 border p-2 rounded-lg shadow hover:bg-accent">
                            <Upload size={20} />
                            <span>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</span>
                        </label>
                    </CardContent>
                    <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx, .csv</p>
                </Card>
            )}
        </div>
    );
};

export default DataVisualizer;
